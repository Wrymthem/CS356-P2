import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
import java.util.*;

public class AdminPanel {

	private static AdminPanel instance = new AdminPanel();
	
	JFrame jfrm;
	JTree jtr;
	
	ArrayList <GroupComponent> groupSystem = new ArrayList <GroupComponent> ();
	
	GroupComponent root = new UserGroup("root");
	
	private AdminPanel() {
		groupSystem.add(root);
		// create frame
		jfrm = new JFrame("Admin");
		jfrm.getContentPane().setLayout(new BorderLayout());
		jfrm.setSize(600, 275);
		jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JPanel panel = new JPanel(new BorderLayout());
		
		jtr = new JTree();
		DefaultTreeModel model = new DefaultTreeModel((DefaultMutableTreeNode) groupSystem.get(0));
		jtr.setModel(model);
		jtr.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		
		JTextField jtfGroup = new JTextField();
		jtfGroup.setColumns(10);
		
		JButton addGroupButton = new JButton("Add Group");
		addGroupButton.addActionListener(new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				addAGroup(jtfGroup.getText());
			}
		});
		
		JTextField jtfUser = new JTextField();
		jtfUser.setColumns(10);
		
		JButton addUserButton = new JButton("Add User");
		addUserButton.addActionListener(new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				addAUser(jtfUser.getText());
			}
		});
		
		JScrollPane jsp = new JScrollPane(jtr);
		panel.add(jsp);
		
		
		JPanel [][] panelHolder = new JPanel[5][2];
		JPanel panel2 = new JPanel(new GridLayout(5, 2));
		
		for(int m = 0; m < 5; m++) {
			for(int n = 0; n < 2; n++) {
				panelHolder[m][n] = new JPanel();
				panel2.add(panelHolder[m][n]);
			}
		}
		
		panel.add(jtr);
		
		panelHolder[0][0].add(jtfGroup);
		panelHolder[0][1].add(addGroupButton);
		panelHolder[1][0].add(jtfUser);
		panelHolder[1][1].add(addUserButton);
		
		jfrm.add(panel, BorderLayout.WEST);
		jfrm.add(panel2, BorderLayout.LINE_END);
		
		jfrm.getContentPane().add(panel);
		jfrm.setVisible(true);
	}
	
	private void addAGroup(String name) {
		DefaultMutableTreeNode current = (DefaultMutableTreeNode) jtr.getLastSelectedPathComponent();
		if (current instanceof User)
			current = (DefaultMutableTreeNode) current.getParent();
		else if (current == null)
			current = (DefaultMutableTreeNode) groupSystem.get(0);
		addAGroup(name, (UserGroup) current);
	}
	
	private void addAGroup(String name, UserGroup parentGroup) {
		for (GroupComponent u : groupSystem)
			if (u.toString().equals(name)) {
				JOptionPane.showMessageDialog(jfrm, "Name in use");
				return;
			}
		UserGroup userGroup = new UserGroup(name);
		groupSystem.add(userGroup);
		parentGroup.add(userGroup);
		update(userGroup, parentGroup);
	}
	
	private void addAUser(String name) {
		DefaultMutableTreeNode current = (DefaultMutableTreeNode) jtr.getLastSelectedPathComponent();
		if (current instanceof User)
			current = (DefaultMutableTreeNode) current.getParent();
		else if (current == null)
			current = (DefaultMutableTreeNode) groupSystem.get(0);
		addAUser(name, (UserGroup) current);
	}
	
	private void addAUser(String name, UserGroup parentGroup) {
		for (GroupComponent u : groupSystem)
			if (u.toString().equals(name)) {
				JOptionPane.showMessageDialog(jfrm, "Name in use");
				return;
			}
		User user = new User(name);
		groupSystem.add(user);
		parentGroup.add(user);
		update(user, parentGroup);
	}
	
	private void update(GroupComponent leaf, UserGroup parent) {
		parent.add((DefaultMutableTreeNode) leaf);
		DefaultTreeModel model = new DefaultTreeModel((DefaultMutableTreeNode) groupSystem.get(0));
		jtr.setModel(model);
		expandAllNodes(jtr, 0, jtr.getRowCount());
	}
	
	private void expandAllNodes(JTree tree, int startingIndex, int rowCount){
	    for(int i=startingIndex;i<rowCount;++i){
	        tree.expandRow(i);
	    }

	    if(tree.getRowCount()!=rowCount){
	        expandAllNodes(tree, rowCount, tree.getRowCount());
	    }
	}
	
	public static AdminPanel getInstance() {
		return instance;
	}
}
